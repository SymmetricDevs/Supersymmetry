import static globals.Globals.*

import static gregtech.api.unification.material.Materials.*;
import gregtech.api.unification.material.MarkerMaterials;

VACUUM_FREEZER = recipemap('vacuum_freezer')
CSTR = recipemap('continuous_stirred_tank_reactor')
TBR = recipemap('trickle_bed_reactor')
FBR = recipemap('fixed_bed_reactor')
BCR = recipemap('bubble_column_reactor')
BR = recipemap('batch_reactor')
POLYMERIZATION = recipemap('polymerization_tank')
FLUIDIZEDBR = recipemap('fluidized_bed_reactor')
DISTILLATION_TOWER = recipemap('distillation_tower')
DISTILLERY = recipemap('distillery')
ROASTER = recipemap('roaster')
MIXER = recipemap('mixer')
DRYER = recipemap('dryer')
SIFTER = recipemap('sifter')
CENTRIFUGE = recipemap('centrifuge')
PYROLYSE = recipemap('pyrolyse_oven')
LCR = recipemap('large_chemical_reactor')
EBF = recipemap('electric_blast_furnace')
VULCANIZER = recipemap('vulcanizing_press')
ALLOY_SMELTER = recipemap('alloy_smelter')
ARC_FURNACE = recipemap('arc_furnace')
AUTOCLAVE = recipemap('autoclave')
COMPRESSOR = recipemap('compressor')
ASSEMBLER = recipemap('assembler')
ELECTROLYZER = recipemap('electrolyzer')
ELECTROLYTIC_CELL = recipemap('electrolytic_cell')
REACTION_FURNACE = recipemap('reaction_furnace')
ELECTROMAGNETIC_SEPARATOR = recipemap('electromagnetic_separator')
PSA = recipemap('pressure_swing_adsorption')
CHEMICAL_BATH = recipemap('chemical_bath')
ION_EXCHANGE = recipemap('ion_exchange_column')
FLUID_EXTRACTOR = recipemap('extractor')
TUBE_FURNACE = recipemap('tube_furnace')
SINTERING_OVEN = recipemap('sintering_oven')
VACUUM_DT = recipemap('vacuum_distillation')
CRACKER = recipemap('cracker')
FLUID_HEATER = recipemap('fluid_heater')

// Useful reactions

BR.recipeBuilder()
.inputs(ore('dustPotassiumHydroxide') * 3)
.fluidInputs(fluid('hydrochloric_acid')* 1000)
.fluidOutputs(fluid('diluted_rock_salt_solution') * 2000)
.EUt(30)
.duration(160)
.buildAndRegister()

DISTILLATION_TOWER.recipeBuilder()
.fluidInputs(fluid('diluted_rock_salt_solution') * 2000)
.fluidOutputs(fluid('potassium_chloride_solution') * 1000)
.fluidOutputs(fluid('water') * 1000)
.EUt(16)
.duration(60)
.buildAndRegister()

DISTILLERY.recipeBuilder()
.fluidInputs(fluid('potassium_chloride_solution') * 1000)
.fluidOutputs(fluid('water') * 1000)
.outputs(metaitem('dustRockSalt') * 2)
.EUt(16)
.duration(60)
.buildAndRegister()

CSTR.recipeBuilder()
.fluidInputs(fluid('potassium_hydroxide_solution') * 100)
.fluidInputs(fluid('carbon_dioxide') * 50)
.fluidOutputs(fluid('diluted_potassium_carbonate_solution') * 150)
.EUt(30)
.duration(15)
.buildAndRegister()

DISTILLERY.recipeBuilder()
.fluidInputs(fluid('diluted_potassium_carbonate_solution') * 3000)
.outputs(metaitem('dustPotassiumCarbonate') * 6)
.fluidOutputs(fluid('water') * 3000)
.EUt(30)
.duration(400)
.buildAndRegister()

BR.recipeBuilder()
.fluidInputs(fluid('ammonium_chloride_solution') * 2000)
.inputs(ore('dustCalciumHydroxide') * 5)
.fluidOutputs(fluid('ammonia') * 2000)
.fluidOutputs(fluid('diluted_calcium_chloride_solution') * 2000)
.EUt(30)
.duration(360)
.buildAndRegister()

DISTILLERY.recipeBuilder()
.fluidInputs(fluid('diluted_calcium_chloride_solution') * 2000)
.fluidOutputs(fluid('water') * 2000)
.outputs(metaitem('dustCalciumChloride') * 3)
.EUt(30)
.duration(100)
.buildAndRegister()

BR.recipeBuilder()
.fluidInputs(fluid('potassium_carbonate_solution') * 1000)
.fluidInputs(fluid('water') * 1000)
.inputs(ore('dustCalciumHydroxide') * 5)
.fluidOutputs(fluid('potassium_hydroxide_solution') * 2000)
.outputs(metaitem('dustCalcite') *  5)
.EUt(30)
.duration(200)
.buildAndRegister()

BCR.recipeBuilder()
    .fluidInputs(fluid('sodium_hydroxide_solution') * 50)
    .fluidInputs(fluid('hydrogen_chloride') * 50)
    .fluidOutputs(fluid('salt_water') * 100)
    .duration(10)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

BR.recipeBuilder()
    .inputs(ore('dustQuicklime') * 2)
    .fluidInputs(fluid('hydrogen_chloride') * 2000)
    .fluidOutputs(fluid('calcium_chloride_solution') * 1000)
    .duration(100)
    .EUt(16)
    .buildAndRegister()

BR.recipeBuilder()
    .inputs(ore('dustCalciumHydroxide') * 5)
    .fluidInputs(fluid('hydrogen_chloride') * 2000)
    .fluidOutputs(fluid('diluted_calcium_chloride_solution') * 2000)
    .duration(100)
    .EUt(16)
    .buildAndRegister()

ROASTER.recipeBuilder()
    .inputs(ore('dustCalcium'))
    .fluidInputs(fluid('oxygen') * 1000)
    .outputs(metaitem('dustQuicklime') * 2)
    .duration(60)
    .EUt(30)
    .buildAndRegister()

BR.recipeBuilder()
	.fluidInputs(fluid('phosphoric_acid') * 1000)
	.inputs(ore('dustSodiumHydroxide') * 12)
	.fluidOutputs(fluid('diluted_sodium_phosphate_solution') * 1000)
	.EUt(16)
	.duration(200)
	.buildAndRegister()

DISTILLERY.recipeBuilder()
	.fluidInputs(fluid('diluted_sodium_phosphate_solution') * 1000)
    .outputs(metaitem('dustSodiumPhosphate') * 8)
	.fluidOutputs(fluid('water') * 3000)
	.EUt(30)
	.duration(100)
	.buildAndRegister()

DISTILLERY.recipeBuilder()
	.fluidInputs(fluid('sodium_phosphate_solution') * 1000)
    .outputs(metaitem('dustSodiumPhosphate') * 8)
	.fluidOutputs(fluid('water') * 1000)
	.EUt(30)
	.duration(160)
	.buildAndRegister()

MIXER.recipeBuilder()
	.fluidInputs(fluid('water') * 1000)
	.inputs(ore('dustSodiumPhosphate') * 8)
	.fluidOutputs(fluid('sodium_phosphate_solution') * 1000)
	.duration(100)
	.EUt(7)
	.buildAndRegister()