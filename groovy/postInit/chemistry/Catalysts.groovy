import globals.Globals

MIXER = recipemap('mixer')
SINTERING_OVEN = recipemap('sintering_oven')
BR = recipemap('batch_reactor')
ROASTER = recipemap('roaster')
DISTILLERY = recipemap('distillery')
DT = recipemap('distillation_tower')
DRYER = recipemap('dryer')
AUTOCLAVE = recipemap('autoclave')
ALLOY_SMELTER = recipemap('alloy_smelter')

// Alumina supports
MIXER.recipeBuilder()
    .inputs(ore('dustAmmoniumHexachloroplatinate') * 17)
    .fluidInputs(fluid('phosphoric_acid') * 1000)
    .fluidOutputs(fluid('platinum_precursor_solution') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

SINTERING_OVEN.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('platinum_precursor_solution') * 1000)
    .outputs(metaitem('dustSupportedPlatinum'))
    .fluidOutputs(fluid('phosphoric_acid') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

MIXER.recipeBuilder()
    .inputs(ore('dustPalladiumChloride') * 3)
    .fluidInputs(fluid('phosphoric_acid') * 1000)
    .fluidOutputs(fluid('palladium_precursor_solution') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

SINTERING_OVEN.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('palladium_precursor_solution') * 1000)
    .outputs(metaitem('dustSupportedPalladium'))
    .fluidOutputs(fluid('phosphoric_acid') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

SINTERING_OVEN.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('nickel_nitrate_solution') * 1000)
    .outputs(metaitem('dustSupportedNickel'))
    .fluidOutputs(fluid('dense_steam') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

ROASTER.recipeBuilder()
    .inputs(ore('dustSupportedNickel'))
    .fluidInputs(fluid('hydrogen_sulfide') * 100)
    .outputs(metaitem('dustHydrotreatingCatalyst'))
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

/* Isomerization catalysts

BR.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('hydrogen_chloride') * 100)
    .outputs(metaitem('dustChloridedAlumina'))
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

BR.recipeBuilder()
    .inputs(ore('dustZirconiumDioxide') * 3)
    .fluidInputs(fluid('dustAluminiumSulfate'))
    .outputs(metaitem('dustSulfatedMetalOxide'))
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

*/

// Zeolites

DISTILLERY.recipeBuilder()
    .fluidInputs(fluid('sodium_silicate_solution') * 1000)
    .outputs(metaitem('dustSodiumSilicate') * 6)
    .fluidOutputs(fluid('water') * 1000)
    .duration(20)
    .EUt(30)
    .buildAndRegister()

BR.recipeBuilder()
    .fluidInputs(fluid('sodium_hydroxide_solution') * 2000)
    .fluidInputs(fluid('dense_steam') * 1000)
    .inputs(ore('dustSiliconDioxide') * 3)
    .fluidOutputs(fluid('diluted_sodium_silicate_solution') * 4000)
    .duration(200)
    .EUt(30)
    .buildAndRegister()

DISTILLERY.recipeBuilder()
    .fluidInputs(fluid('sodium_aluminate_solution') * 1500)
    .fluidOutputs(fluid('water') * 1500)
    .outputs(metaitem('dustSodiumAluminate') * 4)
    .duration(160)
    .EUt(30)
    .buildAndRegister()

BR.recipeBuilder()
    .fluidInputs(fluid('sodium_hydroxide_solution') * 2000)
    .inputs(ore('dustAnyPurityAluminium') * 2)
    .fluidOutputs(fluid('hydrogen') * 6000)
    .outputs(metaitem('dustSodiumAluminate') * 8)
    .duration(200)
    .EUt(30)
    .buildAndRegister()

AUTOCLAVE.recipeBuilder()
    .fluidInputs(fluid('diluted_sodium_silicate_solution') * 4000)
    .inputs(ore('dustSodiumAluminate') * 4)
    .fluidOutputs(fluid('raw_molecular_sieve') * 4000)
    .duration(180)
    .EUt(30)
    .buildAndRegister()

AUTOCLAVE.recipeBuilder()
    .fluidInputs(fluid('sodium_silicate_solution') * 1000)
    .inputs(ore('dustSodiumAluminate') * 4)
    .fluidOutputs(fluid('raw_molecular_sieve') * 4000)
    .duration(180)
    .EUt(30)
    .buildAndRegister()

DT.recipeBuilder()
    .fluidInputs(fluid('diluted_sodium_silicate_solution') * 1000)
    .fluidOutputs(fluid('water') * 750)
    .fluidOutputs(fluid('sodium_silicate_solution') * 250)
    .duration(200)
    .EUt(30)
    .buildAndRegister()

DRYER.recipeBuilder()
    .fluidInputs(fluid('raw_molecular_sieve') * 4000)
    .outputs(metaitem('dustMolecularSieve') * 10)
    .duration(400)
    .EUt(30)
    .buildAndRegister()

ALLOY_SMELTER.recipeBuilder()
    .inputs(ore('dustMolecularSieve') * 1)
    .inputs(ore('dustClay') * 1)
    .outputs(metaitem('cracking_catalyst') * 1)
    .duration(100)
    .EUt(60)
    .buildAndRegister()

// Olefin condensation catalysts

    // SHOP process catalyst

    BR.recipeBuilder()
        .inputs(ore('dustNickelIiOxide') * 2)
        .fluidInputs(fluid('nitric_acid') * 2000)
        .fluidOutputs(fluid('nickel_nitrate_solution') * 1000)
        .duration(20)
        .EUt(30)
        .buildAndRegister()

    DISTILLERY.recipeBuilder()
        .fluidInputs(fluid('nickel_nitrate_solution') * 1000)
        .outputs(metaitem('dustNickelIiNitrate') * 9)
        .fluidOutputs(fluid('water') * 1000)
        .duration(20)
        .EUt(30)
        .buildAndRegister()

    BR.recipeBuilder()
        .inputs(ore('dustNickelIiNitrate') * 9)
        .fluidInputs(fluid('acetylacetone') * 2000)
        .fluidInputs(fluid('sodium_hydroxide_solution') * 2000)
        .fluidOutputs(fluid('nickel_ii_bisacetylacetonate_solution') * 2000)
        .duration(120)
        .EUt(30)
        .buildAndRegister()

    ROASTER.recipeBuilder()
        .fluidInputs(fluid('nickel_ii_bisacetylacetonate_solution') * 2000)
        .outputs(metaitem('dustNickelIiBisacetylacetonate'))
        .outputs(metaitem('dustSodiumNitrate') * 10)
        .fluidOutputs(fluid('dense_steam') * 2000)
        .duration(120)
        .EUt(480)
        .buildAndRegister()

    BR.recipeBuilder()
        .inputs(ore('dustNickelIiBisacetylacetonate'))
        .fluidInputs(fluid('cyclooctadiene') * 2000)
        .fluidInputs(fluid('triethylaluminium') * 2000)
        .outputs(metaitem('dustBiscyclooctadienenickelZero'))
        .fluidOutputs(fluid('ethane') * 1000)
        .fluidOutputs(fluid('ethylene') * 1000)
        .fluidOutputs(fluid('diethylaluminium_acetylacetonate') * 2000)
        .duration(120)
        .EUt(30)
        .buildAndRegister()

    BR.recipeBuilder()
        .fluidInputs(fluid('diethylaluminium_acetylacetonate') * 1000)
        .fluidInputs(fluid('hydrochloric_acid') * 3000)
        .fluidOutputs(fluid('aluminium_chloride_solution') * 3000)
        .fluidOutputs(fluid('acetylacetone') * 1000)
        .fluidOutputs(fluid('ethylene') * 2000)
        .duration(160)
        .EUt(30)
        .buildAndRegister()

    DISTILLERY.recipeBuilder()
        .fluidInputs(fluid('aluminium_chloride_solution') * 3000)
        .outputs(metaitem('dustAluminiumChloride') * 4)
        .fluidOutputs(fluid('water') * 3000)
        .EUt(Globals.voltAmps[1])
        .duration(20)
        .buildAndRegister()

    BR.recipeBuilder()
        .inputs(ore('dustTriphenylphosphine'))
        .fluidInputs(fluid('phosphorus_trichloride') * 500)
        .fluidOutputs(fluid('chlorodiphenylphosphine') * 1500)
        .duration(200)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()

    CSTR.recipeBuilder()
        .fluidInputs(fluid('chlorodiphenylphosphine') * 50)
        .fluidInputs(fluid('acetic_acid') * 50)
        .notConsumable(fluid('sodium_hydroxide_solution') * 50)
        .fluidOutputs(fluid('diphenylphosphinoacetic_acid') * 50)
        .duration(10)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()

    BR.recipeBuilder()
        .inputs(ore('dustBiscyclooctadienenickelZero'))
        .fluidInputs(fluid('diphenylphosphinoacetic_acid') * 1000)
        .fluidInputs(fluid('ethylene_glycol') * 1000)
        .fluidOutputs(fluid('shell_higher_olefin_catalyst_solution') * 1000)
        .duration(200)
        .EUt(Globals.voltAmps[3])
        .buildAndRegister()

    // SPA catalysts for gasoline polymerate

    /*MIXER.recipeBuilder()
        .inputs(ore('dustDiatomaceousEarth'))
        .fluidInputs(fluid('phosphoric_acid') * 1700)
        .outputs(metaitem('dustWetSolidPhosphoricAcidCatalyst'))
        .duration(200)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()
        
    DRYER.recipeBuilder()
        .inputs(ore('dustWetSolidPhosphoricAcidCatalyst')
        .outputs(ore('dustSolidPohpshoricAcidCatalyst')
        .duration(200)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()*/