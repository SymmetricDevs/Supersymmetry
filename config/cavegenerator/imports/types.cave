{
  # A function that produces a dummy noise
  # generator when optionally provided a
  # constant output to use.
  # Target:
  #  any noise generator
  # Parameters: 
  #  @1? -> constant output or none
  # Examples:
  #  $dummy_generator()
  #  $dummy_generator(2.0)
  dummy_generator(): {
    dummy: true
    dummyOutput: @1?
  }
  # A function that produces a simple noise
  # generator when given a threshold and an
  # optional noise type.
  # Target:
  #  any noise generator
  # Parameters: 
  #  @1  -> threshold
  #  @2? -> type or simplex
  # Examples:
  #  $simple_generator(-0.5, simplex)
  #  $simple_generator(-0.2)
  simple_generator(): {
    threshold: @1
    type: @2?(simplex)
  }
  # A function that produces a scalable float
  # (used in tunnels and ravines) which never
  # changes. In other words, it is constant.
  # Target:
  #  any scalable float
  # Parameters: 
  #  @1 -> startVal
  # Examples:
  #  $constant(2)
  constant(): {
    startVal: @1
    startValRandFactor: 0
    factor: 1
    randFactor: 0
    exponent: 1
  }
  # Produces vine decorators on each axis when
  # given a height range, integrity, and region
  # parameters.
  # Target:
  #  wall decorators
  # Parameters:
  #  @1  -> integrity
  #  @2  -> height
  #  @3? -> region or none
  # Examples:
  #  $vines(0.1, [10, 30])
  #  $vines(0.2, [20, 40], $MY_NOISE)
  vines(): [
    $single_vine(vine:1, south, @1, @2, @3?)
    $single_vine(vine:2, west, @1, @2, @3?)
    $single_vine(vine:4, north, @1, @2, @3?)
    $single_vine(vine:8, east, @1, @2, @3?)
  ]
  # Generates a new cluster settings
  # object when given a few parameters.
  # Target:
  #  clusters
  # Parameters: 
  #  @1 -> ore block
  #  @2 -> secondary block
  #  @3 -> spawn chance (should be very low)
  #  @4 -> seed (any number)
  # Examples:
  #  $ore_vein(coal_ore, gravel, 0.005, 5684)
  ore_vein(): {
    states: [ "@2", "@1" ]
    chance: @3
    integrity: 0.4
    radius: [ 35, 50 ]
    seed: @4
    noise: $vein_shape(@4)
  }
  # Generates a makeshift geode underground.
  # This feature emulates the geode structures
  # spawned in Biome Bundle. They are made of
  # obsidian and filled with various ores and
  # lava blocks.
  # Target:
  #  tunnels
  # Parameters:
  #  @1? -> count or 2
  #  @2? -> height or [ 6, 20 ]
  #  @3? -> integrity or 0.05
  #  @4? -> blocks or [ lava, diamond, emerald, gold ]
  #  @5? -> shell matchers or [ stone ]
  # Examples:
  #  $geode(5, [5, 35])
  #  $geode(3, [10, 20], 0.1, $BLOCKS, $MATCHERS)
  #  $geode()
  geode(): {
    count: @1 ? (2)
    height: @2 ? ([ 6, 20 ])
    replaceSolidBlocks: true
    hasBranches: false
    chance: 1 / 8
    distance: 15
    systemChance: 0
    # Set shell.sphereResolution: 2 for open geodes
    shell: $geode_shell(@5?)
    caveBlocks: $geode_blocks(@3?, @4?)
  }
  # Produces tunnels in the shape of roots that
  # dig deep underground. Allows you to control
  # their depth, shape, and how much dirt gets
  # placed around them with a few parameters. 
  # Target:
  #  tunnels
  # Parameters:
  #  @1? -> count or 5
  #  @2? -> height or [ 0, 55 ]
  #  @3? -> pitch randomness or 1
  #  @4? -> shell radius or 3
  #  @5? -> replaceable or [ stone, dirt, air ]
  # Examples:
  #  $roots(3, [20, 60])
  #  $roots(10, [9, 53], 1.25, 5, $ROOT_REPLACEABLE)
  #  $roots()
  roots(): {
    height: @2 ? ([ 0, 55 ])
    replaceableBlocks: @5 ? ([ "stone", "dirt", "air" ])
    count: @1 ? (5)
    chance: 0.4
    systemChance: 0.05
    noiseYReduction: false
    resolution: 6
    scale: [ -2.5, 0 ]
    stretch: 1.5
    pitch: [ 1.5, 0.75 ]
    dPitch: [ 0, 0, 1, "@3 ? (1)" ]
    checkWater: false
    wallDecorators: []
    caveBlocks: { states: "log:12", height: [ 0, 255 ] }
    shell: $root_shell(@4?)
  }
  # Private values that will not get exported.
  variables: {
    # Yields a vine block for a single direction.
    # Parameters: 
    #  @1 -> block
    #  @2 -> direction
    #  @3  -> integrity
    #  @4  -> height
    #  @5? -> region
    single_vine(): {
      placement: overlay
      states: @1
      directions: @2
      integrity: @3
      height: @4
      region: @5?
    }
    # Noise parameters detailing the of the ore 
    # veins when they spawn in the world.
    # Parameters: 
    #  @1 -> seed
    vein_shape(): {
      frequency: 0.02
      threshold: -0.2
      stretch: 0.75
      type: Cellular
      returnType: Distance3Div
      jitter: 1
      perturb: true
      perturbAmp: 10
      perturbFreq: 0.025
      invert: true
      cache: true
      seed: @1
    }
    # Creates the blocks that surround geodes
    # Parameters: 
    #  @1? -> matchers or [ stone ]
    geode_shell(): {
      radius: 2
      # Set this to 2 to have open geodes
      sphereResolution: 1
      decorators: {
        states: obsidian
        matchers: @1 ? (stone)
        integrity: 0.8
      }
    }
    # Creates the blocks that fill geodes.
    # Parameters:
    #  @1? -> integrity or 0.05
    #  @2? -> blocks or [ lava, diamond, emerald, gold ]
    geode_blocks(): [
      {
        states: @2 ? ([ "lava", "diamond_ore", "emerald_ore", "gold_ore" ])
        integrity: @1 ? (0.05)
      }
      { states: "gravel", integrity: 0.5 }
      { states: "stone" }
    ]
    # Creates the blocks that surround roots
    # Parameters: 
    #  @1? -> radius or 3
    root_shell(): {
      radius: @1 ? (3)
      decorators: {
        integrity: 0.75
        states: dirt
        matchers: stone
      }
    }
  }
}